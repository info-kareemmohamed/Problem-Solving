//Language: c++ 
//Link: https://leetcode.com/problems/two-sum/


#include <iostream>
#include <unordered_map>
#include <vector>
#include <stdexcept>

class Solution {
public:
    static std::vector<int> twoSum(const std::vector<int>& nums, int target) {
        // Create an unordered_map to store numbers and their indices
        std::unordered_map<int, int> numMap;

        // Iterate through the array
        for (int i = 0; i < nums.size(); i++) {
            // Calculate the complement
            int complement = target - nums[i];

            // Check if the complement exists in the map
            if (numMap.find(complement) != numMap.end()) {
                // If found, return the indices
                return {numMap[complement], i};
            }

            // Otherwise, add the current number and its index to the map
            numMap[nums[i]] = i;
        }

        // If no solution exists, throw an exception
        throw std::invalid_argument("No two sum solution exists");
    }
};
